//
//  MessagesResponse.swift
//
//
//  Created by Fumito Ito on 2024/03/17.
//

import Foundation

/// Object type.
///
/// For Messages, this is always "message".
public enum MessagesResponseType: String, Decodable {
    case message
}

/// Messages API response
public struct MessagesResponse: Decodable {
    /// Unique object identifier.
    public let id: String
    /// Object type.
    ///
    /// For Messages, this is always "message".
    public let type: MessagesResponseType
    /// Conversational role of the generated message.
    ///
    /// This will always be "assistant".
    public let role: Role
    /// Content generated by the model.
    ///
    /// This is an array of content blocks, each of which has a type that determines its shape. Currently, the only type in responses is "text".
    public let content: [Content]
    /// The model that handled the request.
    public let model: Model?
    /// The reason that we stopped.
    ///
    /// In non-streaming mode this value is always non-null. In streaming mode, it is null in the `message_start` event and non-null otherwise.
    public let stopReason: StopReason?
    /// Which custom stop sequence was generated, if any.
    public let stopSequence: String?
    /// Billing and rate-limit usage.
    public let usage: TokenUsage

    public init(id: String, type: MessagesResponseType, role: Role, content: [Content], model: Model?, stopReason: StopReason?, stopSequence: String?, usage: TokenUsage) {
        self.id = id
        self.type = type
        self.role = role
        self.content = content
        self.model = model
        self.stopReason = stopReason
        self.stopSequence = stopSequence
        self.usage = usage
    }
}
